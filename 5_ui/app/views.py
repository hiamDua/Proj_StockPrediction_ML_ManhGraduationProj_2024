import streamlit as st
import pandas as pd
import numpy as np
from prediction import StockPricePredictor
from pair_trading_strategy import TradingStrategy, TradingVisualization, PairTradingAnalysis
from typing import List
from data_loader import StockDataLoader
from reversal_trading_strategy import ReversalTradingAnalysis

class StockPriceView:
    def __init__(self):
        self.predictor = StockPricePredictor(r"C:\Users\manhm\Downloads\MiniProj_StockPrediction_ML_SpManhGraduationProj_2024\2_code_notebooks_TrainingModel\pkl_save_model_results"
        )
        self.pair_trading_strategy = TradingStrategy()
        self.visualization = TradingVisualization()
        self.data_loader = StockDataLoader()
        self.pair_analysis = PairTradingAnalysis()
        self.reversal_analysis = ReversalTradingAnalysis()

    def setup_page(self):
        st.title("Stock Price Prediction and Trading System")
        st.sidebar.header("Trading Options")
        
        strategy = st.sidebar.radio(
            "Select Trading Strategy",
            ["Price Prediction", "Pair Trading", "Reversal Trading"],
            help="""
            Price Prediction: Predict closing price
            Pair Trading: Trade the spread between two stocks
            Reversal Trading: Trade based on price reversals
            """
        )
        return strategy

    def run(self):
        strategy = self.setup_page()
        
        if strategy == "Price Prediction":
            self.run_price_prediction()
        elif strategy == "Pair Trading":
            self.run_pair_trading()
        elif strategy == "Reversal Trading":
            self.run_reversal_trading()

    def run_price_prediction(self):
        """
        List Price Prediction
        """
        model_list = ["FPT", "CMG", "VGI", "VTL", "CMT", "DGW", "ELC", "SAM", "VGC", "VTP"]
        selected_model = st.sidebar.selectbox("Select Stock", model_list)

        if self.predictor.load_model(selected_model):
            st.success(f"Model {selected_model} loaded successfully!")
            input_data = self.pair_trading_strategy.create_input_form()

            if st.button("Predict Closing Price"):
                prediction = self.predictor.predict(input_data)
                if prediction is not None:
                    self.display_prediction_results(selected_model, input_data, prediction)

    def run_pair_trading(self):
        st.sidebar.subheader("Pair Trading Parameters")
        
        # Strategy selection
        strategy_params = {
            "Conservative": {
                "z_open_threshold": 2.0,
                "z_close_threshold": 0.0,
                "profit_target": float('inf'),
                "loss_limit": float('-inf'),
            },
            "Aggressive": {
                "z_open_threshold": 2.5,
                "z_close_threshold": 0.5,
                "profit_target": 5000000,
                "loss_limit": -3000000,
            }
        }
        
        selected_strategy = st.sidebar.selectbox(
            "Select Strategy",
            ["Conservative", "Aggressive"]
        )
        
        # Stock selection
        # Pair Trading
        model_list = ["FPT", "CMG", "VGI", "VTL", "CMT", "DGW", "ELC", "SAM", "VGC", "VTP"]
        stock1 = st.sidebar.selectbox("Select Stock 1", model_list)
        stock2 = st.sidebar.selectbox("Select Stock 2", model_list, index=1)
        
        # Parameters
        window_size = st.sidebar.slider("Rolling Window (days)", 10, 50, 30)
        lookback_days = st.sidebar.slider("Analysis Period (days)", 30, 500, 100)
        
        if stock1 != stock2:
            if st.button("Analyze Pair Trading"):
                try:
                    # Load historical data
                    stock1_data = self.data_loader.get_recent_data(stock1, lookback_days)
                    stock2_data = self.data_loader.get_recent_data(stock2, lookback_days)
                    
                    # Set window size
                    self.pair_analysis.window_size = window_size
                    
                    # Calculate metrics
                    historical_data = self.pair_analysis.calculate_metrics(stock1_data, stock2_data)
                    current_z = historical_data['z_score'].iloc[-1]
                    
                    # Display analysis
                    self.pair_analysis.plot_pair_trading_analysis(
                        stock1, stock2, historical_data, 
                        current_z, strategy_params[selected_strategy]
                    )
                    
                except Exception as e:
                    st.error(f"Error analyzing pair trading: {str(e)}")
        else:
            st.warning("‚ö† Please select different stocks for pair trading")

    def run_reversal_trading(self):
        """Ch·∫°y ph√¢n t√≠ch giao d·ªãch ƒë·∫£o chi·ªÅu"""
        st.sidebar.subheader("Tham S·ªë Giao D·ªãch ƒê·∫£o Chi·ªÅu")
        
        # Gi·∫£i th√≠ch chi·∫øn l∆∞·ª£c
        st.sidebar.info("""
        ‚ÑπÔ∏è **Giao d·ªãch ƒë·∫£o chi·ªÅu l√† g√¨?**
        - Chi·∫øn l∆∞·ª£c t√¨m ƒëi·ªÉm ƒë·∫£o chi·ªÅu c·ªßa gi√°
        - K·∫øt h·ª£p nhi·ªÅu ch·ªâ b√°o k·ªπ thu·∫≠t
        - M·ª•c ti√™u: Mua ƒë√°y, b√°n ƒë·ªânh
        """)
        
        # Ch·ªçn c·ªï phi·∫øu
        # Reversal
        stock_list = ["FPT", "CMG", "VGI", "VTL", "CMT", "DGW", "ELC", "SAM", "VGC", "VTP"]
        selected_stock = st.sidebar.selectbox("Ch·ªçn C·ªï Phi·∫øu", stock_list)
        
        # Ch·ªçn preset ho·∫∑c t√πy chÔøΩnh
        strategy_mode = st.sidebar.radio(
            "Ch·∫ø ƒë·ªô c√†i ƒë·∫∑t",
            ["Preset", "T√πy ch·ªânh"]
        )
        
        if strategy_mode == "Preset":
            selected_preset = st.sidebar.selectbox(
                "Ch·ªçn Chi·∫øn L∆∞·ª£c",
                ["Conservative", "Aggressive"]
            )
            
            # Gi·∫£i th√≠ch chi ti·∫øt vÔøΩ m·ªói preset
            if selected_preset == "Conservative":
                strategy_params = {
                    "z_threshold": 2.0,
                    "rsi_upper": 70,
                    "rsi_lower": 30,
                    "bb_period": 20
                }
                st.sidebar.info("""
                üìä **Chi·∫øn l∆∞·ª£c An to√†n (Conservative):**
                
                C√°c ng∆∞·ª°ng giao d·ªãch:
                - Z-score: ¬±2.0 (ƒê·ªô l·ªách chu·∫©n cao)
                - RSI > 70: V√πng qu√° mua m·∫°nh
                - RSI < 30: V√πng qu√° b√°n m·∫°nh
                - BB 20 ng√†y: ƒê·ªô biÔøΩn ƒë·ªông trung b√¨nh
                
                üëâ *Ph√π h·ª£p cho giao dÔøΩch d√†i h·∫°n, √≠t r·ªßi ro*
                """)
            else:  # Aggressive
                strategy_params = {
                    "z_threshold": 1.5,
                    "rsi_upper": 65,
                    "rsi_lower": 35,
                    "bb_period": 20
                }
                st.sidebar.info("""
                üìä **Chi·∫øn l∆∞·ª£c T√≠ch c·ª±c (Aggressive):**
                
                C√°c ng∆∞·ª°ng giao d·ªãch:
                - Z-score: ¬±1.5 (ƒê·ªô l·ªách chu·∫©n v·ª´a ph·∫£i)
                - RSI > 65: V√πng qu√° mua s·ªõm
                - RSI < 35: V√πng qu√° b√°n s·ªõm
                - BB 20 ng√†y: ƒê·ªô biÔøΩn ƒë·ªông trung b√¨nh
                
                üëâ *Ph√π h·ª£p cho giao dÔøΩch ng·∫Øn h·∫°n, nhi·ªÅu t√≠n hi·ªáu h∆°n*
                """)
        
        else:  # T√πy ch·ªânh
            st.sidebar.subheader("T√πy ch·ªânh tham s·ªë")
            
            # Gi·∫£i th√≠ch c√°c ch·ªâ b√°o
            st.sidebar.info("""
            üìà **H∆∞·ªõng d·∫´n c√°c ch·ªâ b√°o:**
            
            1. **Z-score:**
            - ƒêo l∆∞·ªùng ƒë·ªô lÔøΩch gi√° so v·ªõi trung b√¨nh
            - C√†ng cao c√†ng qu√° mua/b√°n
            - Th√¥ng th∆∞·ªùng: 1.5-2.5
            
            2. **RSI (Relative Strength Index):**
            - ƒêo l∆∞·ªùng ƒë·ªông l∆∞·ª£ng tƒÉng/gi·∫£m
            - >70: Qu√° mua | <30: Qu√° b√°n
            - V√πng trung t√≠nh: 30-70
            
            3. **Bollinger Bands (BB):**
            - D·∫£i bi·∫øn ƒë·ªông cÔøΩa gi√°
            - Chu k·ª≥ ng·∫Øn: Nh·∫°y h∆°n
            - Chu k·ª≥ d√†i: ·ªîn ƒëÔøΩnh h∆°n
            """)
            
            # Z-score
            z_threshold = st.sidebar.slider(
                "Ng∆∞·ª°ng Z-score (¬±)",
                1.0, 3.0, 2.0, 0.1,
                help="ƒê·ªô l·ªách chu·∫©n ƒë·ªÉ x√°c ƒë·ªãnh ƒëi·ªÉm c·ª±c tr·ªã. C√†ng cao c√†ng an to√†n"
            )
            
            # RSI
            col1, col2 = st.sidebar.columns(2)
            with col1:
                rsi_upper = st.number_input(
                    "RSI Qu√° Mua",
                    50, 90, 70,
                    help="Ng∆∞·ª°ng RSI x√°c ƒëÔøΩnh v√πng qu√° mua. Th∆∞·ªùng d√πng 70-80"
                )
            with col2:
                rsi_lower = st.number_input(
                    "RSI Qu√° B√°n",
                    10, 50, 30,
                    help="Ng∆∞·ª°ng RSI x√°c ƒëÔøΩnh v√πng qu√° b√°n. Th∆∞·ªùng d√πng 20-30"
                )
            
            # Bollinger Bands
            bb_period = st.sidebar.slider(
                "Chu k·ª≥ Bollinger Bands",
                10, 50, 20,
                help="S·ªë ng√†y ƒë·ªÉ t√≠nh BB. 20 ng√†y l√† ph·ªï bi·∫øn nh·∫•t"
            )
            
            strategy_params = {
                "z_threshold": z_threshold,
                "rsi_upper": rsi_upper,
                "rsi_lower": rsi_lower,
                "bb_period": bb_period
            }
        
        # Tham s·ªë th·ªùi gian
        lookback_days = st.sidebar.slider(
            "S·ªë Ng√†y Ph√¢n T√≠ch", 
            30, 500, 100,
            help="S·ªë ng√†y d·ªØ li·ªáu qu√° kh·ª© ƒë·ªÉ ph√¢n t√≠ch. C√†ng nhi·ªÅu c√†ng ·ªïn ƒë·ªãnh"
        )
        
        # Gi·∫£i th√≠ch t·ªïng quan v·ªÅ chi·∫øn l∆∞·ª£c
        st.sidebar.success("""
        üéØ **C√°ch ƒë·ªçc t√≠n hi·ªáu:**
        
        1. **T√≠n hi·ªáu B√ÅN mÔøΩnh khi:**
        - Z-score > ng∆∞·ª°ng
        - RSI > v√πng qu√° mua
        - Gi√° ch·∫°m/v∆∞·ª£t BB tr√™n
        
        2. **T√≠n hi·ªáu MUA m·∫°nh khi:**
        - Z-score < -ng∆∞·ª°ng
        - RSI < v√πng qu√° b√°n
        - Gi√° ch·∫°m/v∆∞·ª£t BB d∆∞·ªõi
        
        3. **ƒê·ªô tin c·∫≠y t√≠n hi·ªáu:**
        - C√†ng nhi·ªÅu ƒëi·ªÅu ki·ªán th·ªèa m√£n c√†ng t·ªët
        - Kh·ªëi l∆∞·ª£ng giao dÔøΩch l·ªõn
        - N·∫øn ƒë·∫£o chi·ªÅu r√µ r√†ng
        """)
        
        # Buttons
        col1, col2 = st.sidebar.columns([2,1])
        with col1:
            analyze_button = st.button("Ph√¢n T√≠chÔøΩ·∫£o Chi·ªÅu", use_container_width=True)
        with col2:
            if st.button("üîÑ", help="L√†m m·ªõi d·ªØ li·ªáu"):
                st.experimental_rerun()
        
        if analyze_button:
            try:
                # Load d·ªØ li·ªáu
                stock_data = self.data_loader.get_recent_data(
                    selected_stock, 
                    lookback_days
                )
                
                # T√≠nh to√°n c√°c ch·ªâ b√°o
                analysis_data = self.reversal_analysis.calculate_metrics(stock_data)
                
                # L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
                current_data = analysis_data.iloc[-1]
                
                # Hi·ªÉn th·ªã ph√¢n t√≠ch
                self.reversal_analysis.plot_reversal_analysis(
                    selected_stock,
                    analysis_data,
                    current_data,
                    strategy_params
                )
                
                # Hi·ªÉn th·ªã tham s·ªë ƒëang s·ª≠ d·ª•ng
                st.sidebar.write("### Tham S·ªë ƒêang D√πng")
                st.sidebar.write(f"""
                - Z-score threshold: ¬±{strategy_params['z_threshold']}
                - RSI qu√° mua: {strategy_params['rsi_upper']}
                - RSI qu√° b√°n: {strategy_params['rsi_lower']}
                - Chu k·ª≥ BB: {strategy_params['bb_period']} ng√†y
                - S·ªë ng√†y ph√¢n t√≠ch: {lookback_days} ng√†y
                """)
                
            except Exception as e:
                st.error(f"L·ªói khi ph√¢n t√≠ch ƒë·∫£o chi·ªÅu: {str(e)}")

    def display_prediction_results(self, selected_model: str, input_data: pd.DataFrame, prediction: float):
        st.write("### Prediction Results")
        st.write(f"**Predicted Closing Price:** {prediction:,.2f} VND")
        
        # Display analysis
        self.pair_trading_strategy.display_analysis(
            input_data['open'].values[0],
            prediction,
            input_data['high'].values[0] - input_data['low'].values[0]
        )
        
        # Create visualization
        values = [
            input_data['low'].values[0],
            input_data['open'].values[0],
            prediction,
            input_data['high'].values[0]
        ]
        self.visualization.plot_price_visualization(
            values,
            f"{selected_model} Stock Price Analysis"
        )