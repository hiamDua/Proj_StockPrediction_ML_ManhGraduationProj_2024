import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from typing import Dict, Tuple

class ReversalTradingAnalysis:
    def __init__(self):
        self.window_size = 20  # M·∫∑c ƒë·ªãnh cho MA v√† ƒë·ªô bi·∫øn ƒë·ªông

    def calculate_metrics(self, stock_data: pd.DataFrame) -> pd.DataFrame:
        """T√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t cho giao d·ªãch ƒë·∫£o chi·ªÅu"""
        data = stock_data.copy()
        
        # T√≠nh Moving Averages
        data['MA20'] = data['close'].rolling(window=20).mean()
        data['MA50'] = data['close'].rolling(window=50).mean()
        
        # T√≠nh RSI
        delta = data['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        data['RSI'] = 100 - (100 / (1 + rs))
        
        # T√≠nh Bollinger Bands
        data['BB_middle'] = data['close'].rolling(window=20).mean()
        std = data['close'].rolling(window=20).std()
        data['BB_upper'] = data['BB_middle'] + (std * 2)
        data['BB_lower'] = data['BB_middle'] - (std * 2)
        
        # T√≠nh Z-score cho gi√°
        data['price_mean'] = data['close'].rolling(window=self.window_size).mean()
        data['price_std'] = data['close'].rolling(window=self.window_size).std()
        data['z_score'] = (data['close'] - data['price_mean']) / data['price_std']
        
        return data.dropna()

    def get_trading_signals(self, current_data: pd.Series, params: Dict) -> Tuple[str, str]:
        """Sinh t√≠n hi·ªáu giao d·ªãch d·ª±a tr√™n c√°c ch·ªâ b√°o"""
        z_score = current_data['z_score']
        rsi = current_data['RSI']
        price = current_data['close']
        bb_upper = current_data['BB_upper']
        bb_lower = current_data['BB_lower']
        
        # Logic t√≠n hi·ªáu
        if z_score > params['z_threshold'] and rsi > 70:
            return "B√°n", "inverse"  # Qu√° mua
        elif z_score < -params['z_threshold'] and rsi < 30:
            return "Mua", "normal"   # Qu√° b√°n
        elif price > bb_upper and rsi > 65:
            return "C√¢n Nh·∫Øc B√°n", "inverse"
        elif price < bb_lower and rsi < 35:
            return "C√¢n Nh·∫Øc Mua", "normal"
        return "Gi·ªØ Nguy√™n", "off"

    def plot_reversal_analysis(self, stock_code: str, historical_data: pd.DataFrame, 
                             current_data: pd.Series, params: Dict):
        """T·∫°o bi·ªÉu ƒë·ªì ph√¢n t√≠ch ƒë·∫£o chi·ªÅu"""
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.write("### Ph√¢n T√≠ch K·ªπ Thu·∫≠t")
            fig = plt.figure(figsize=(12, 8))
            
            # Subplot cho gi√° v√† BB
            ax1 = plt.subplot2grid((2, 1), (0, 0))
            ax1.plot(historical_data.index, historical_data['close'], label='Gi√°')
            ax1.plot(historical_data.index, historical_data['BB_middle'], 'g--', label='BB Mid')
            ax1.plot(historical_data.index, historical_data['BB_upper'], 'r--', label='BB Upper')
            ax1.plot(historical_data.index, historical_data['BB_lower'], 'r--', label='BB Lower')
            ax1.fill_between(historical_data.index, 
                           historical_data['BB_upper'],
                           historical_data['BB_lower'],
                           alpha=0.1)
            ax1.set_title(f"Bi·ªÉu ƒê·ªì Gi√° {stock_code}")
            ax1.legend()
            
            # Subplot cho RSI
            ax2 = plt.subplot2grid((2, 1), (1, 0))
            ax2.plot(historical_data.index, historical_data['RSI'], label='RSI')
            ax2.axhline(y=70, color='r', linestyle='--')
            ax2.axhline(y=30, color='g', linestyle='--')
            ax2.fill_between(historical_data.index, 70, 30, alpha=0.1, color='gray')
            ax2.set_title("Ch·ªâ B√°o RSI")
            ax2.legend()
            
            plt.tight_layout()
            st.pyplot(fig)

            # Ch√∫ th√≠ch ƒë·∫∑t ngay d∆∞·ªõi bi·ªÉu ƒë·ªì
            col_explain1, col_explain2 = st.columns(2)
            
            with col_explain1:
                st.info("""
                üìä **Bi·ªÉu ƒë·ªì tr√™n (Gi√° & Bollinger Bands):**
                - **ƒê∆∞·ªùng xanh ƒë·∫≠m**: Gi√° hi·ªán t·∫°i
                - **ƒê∆∞·ªùng xanh ƒë·ª©t**: Trung b√¨nh 20 ng√†y
                - **ƒê∆∞·ªùng ƒë·ªè ƒë·ª©t**: D·∫£i Bollinger tr√™n/d∆∞·ªõi
                """)
                
            with col_explain2:
                st.info("""
                üìà **Bi·ªÉu ƒë·ªì d∆∞·ªõi (RSI):**
                - **V√πng tr√™n 70**: V√πng qu√° mua
                - **V√πng d∆∞·ªõi 30**: V√πng qu√° b√°n
                - **V√πng 30-70**: V√πng trung t√≠nh
                """)
        
        with col2:
            st.write("### Tr·∫°ng Th√°i Hi·ªán T·∫°i")
            signal, delta_color = self.get_trading_signals(current_data, params)
            
            # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë quan tr·ªçng
            st.metric(
                label="Gi√° Hi·ªán T·∫°i",
                value=f"{current_data['close']:,.0f} VNƒê",
                delta=f"{(current_data['close'] - current_data['MA20']):,.0f} vs MA20",
                delta_color=delta_color
            )
            
            st.metric(
                label="RSI",
                value=f"{current_data['RSI']:.1f}",
                delta="Qu√° mua" if current_data['RSI'] > 70 else "Qu√° b√°n" if current_data['RSI'] < 30 else "Trung t√≠nh"
            )
            
            # T√≠n hi·ªáu giao d·ªãch
            st.write("### T√≠n Hi·ªáu Giao D·ªãch")
            if signal == "B√°n":
                st.error(f"üîª T√≠n hi·ªáu b√°n m·∫°nh")
            elif signal == "Mua":
                st.success(f"üî∫ T√≠n hi·ªáu mua m·∫°nh")
            elif signal == "C√¢n Nh·∫Øc B√°n":
                st.warning(f"‚ö†Ô∏è C√¢n nh·∫Øc ch·ªët l·ªùi")
            elif signal == "C√¢n Nh·∫Øc Mua":
                st.warning(f"‚ö†Ô∏è C√¢n nh·∫Øc mua v√†o")
            else:
                st.info("‚è∏Ô∏è Gi·ªØ nguy√™n v·ªã th·∫ø")
            
            # Th√¥ng s·ªë k·ªπ thu·∫≠t
            st.write("### Th√¥ng S·ªë K·ªπ Thu·∫≠t")
            st.write(f"""
            - BB Width: {((current_data['BB_upper'] - current_data['BB_lower'])/current_data['BB_middle']*100):.1f}%
            - Kho·∫£ng c√°ch ƒë·∫øn BB tr√™n: {((current_data['BB_upper'] - current_data['close'])/current_data['close']*100):.1f}%
            - Kho·∫£ng c√°ch ƒë·∫øn BB d∆∞·ªõi: {((current_data['close'] - current_data['BB_lower'])/current_data['close']*100):.1f}%
            - MA20: {current_data['MA20']:,.0f} VNƒê
            - MA50: {current_data['MA50']:,.0f} VNƒê
            """) 